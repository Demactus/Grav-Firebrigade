{% block stylesheets %}
    {% do assets.addCss('theme://css/shop.min.css') %}
{% endblock %}

<head>
    <link rel="stylesheet" href="{{ url('theme://css-compiled/shop.min.css') }}"/>
</head>

<script type="module">

    let productsList;
    let products = [];
    let cart = []

    document.addEventListener('DOMContentLoaded', function () {
        const carousel = document.querySelector('.product-list');
        productsList = JSON.parse(carousel.getAttribute('data-list'));
        products = extractProducts(productsList);

        console.log(products);

        const productsHTML = products.map(
            (product) => `<div class="product-card">
            <img src="/user/images/product-images/${product.imageName}"/>
            <h2 class="product-name">${product.name}</h2>
            <strong>${product.price}€</strong>
            <select class="product-size" id="size-${product.id}">
                ${product.sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
            </select>
            <div class="button product-btn">
                <a class="addtocart" id="${product.id}">
                    <div class="add">Hinzufügen</div>
                    <div class="added">Hinzugefügt!</div>
                </a>
            </div>
        </div>`
        );

        const result = document.querySelector(".result");
        result.innerHTML = productsHTML.join("");

        attachAddToCartListeners();

        function attachAddToCartListeners() {
            const productButtons = document.querySelectorAll(".addtocart");
            productButtons.forEach(button => {
                button.addEventListener("click", function () {
                    // Trigger animation on Add to Cart button click
                    $(this).addClass('active');
                    setTimeout(function () {
                        $('.addtocart').removeClass('active');
                    }, 1000);

                    const productId = this.id;
                    const sizeSelect = document.getElementById(`size-${productId}`);
                    if (sizeSelect) {
                        const selectedSize = sizeSelect.value;
                        addToCart(products, productId, selectedSize);
                    } else {
                        console.error(`Size select element not found for product ID: ${productId}`);
                    }
                });
            });
        }

        function addToCart(products, id, size) {
            const product = products.find((product) => product.id == id);
            const cartProduct = cart.find((product) => product.id == id && product.size === size);
            if (cartProduct) {
                incrItem(id, size);
            } else {
                cart.unshift({...product, size: size, quantity: 1});
            }
            updateCart();
            getTotal(cart);
        };

        function updateCart() {
            const cartHTML = cart.map(
                (item) => `<div class="cart-item">
                <h3>${item.name} - ${item.size}</h3>
                <div class="cart-detail">
                    <div class="mid">
                        <button data-id="${item.id}" data-size="${item.size}">-</button>
                        <p>${item.quantity}</p>
                        <button data-id="${item.id}" data-size="${item.size}">+</button>
                    </div>
                    <p>${item.price}€</p>
                    <button data-id="${item.id}" data-size="${item.size}" class="cart-product"><i class="fa-solid fa-trash"></i></button>
                </div>
            </div>`
            );

            const cartItems = document.querySelector(".cart-items");
            cartItems.innerHTML = cartHTML.join("");

            attachEventListenersToCart();
        }

        function attachEventListenersToCart() {
            const buttons = document.querySelectorAll(".cart-item button");

            buttons.forEach(button => {
                button.addEventListener("click", function (e) {
                    const itemId = e.target.dataset.id;
                    const itemSize = e.target.dataset.size;

                    if (e.target.textContent === "-") {
                        decrItem(itemId, itemSize);
                    } else if (e.target.textContent === "+") {
                        incrItem(itemId, itemSize);
                    } else if (e.target.classList.contains("cart-product")) {
                        deleteItem(itemId, itemSize);
                    }
                });
            });
        }


        function getTotal(cart) {
            let {totalItem, cartTotal} = cart.reduce(
                (total, cartItem) => {
                    const price = parseFloat(cartItem.price.replace(",", ".")); // Convert price to number
                    total.cartTotal += price * cartItem.quantity;
                    total.totalItem += cartItem.quantity;
                    return total;
                },
                {totalItem: 0, cartTotal: 0}
            );
            const totalItemsHTML = document.querySelector(".noOfItems");
            totalItemsHTML.innerHTML = `${totalItem} Produkte`;
            const totalAmountHTML = document.querySelector(".total");
            totalAmountHTML.innerHTML = `${cartTotal.toFixed(2)}€`; // Format total with 2 decimal places
        }

        function incrItem(id, size) {
            for (let i = 0; i < cart.length; i++) {
                if (cart[i] && cart[i].id == id && cart[i].size === size) {
                    cart[i].quantity += 1;
                }
            }
            updateCart();
            getTotal(cart);
        }

        function decrItem(id, size) {
            for (let i = 0; i < cart.length; i++) {
                if (cart[i].id == id && cart[i].size === size && cart[i].quantity > 1) {
                    cart[i].quantity -= 1;
                }
            }
            updateCart();
            getTotal(cart);
        }

        function deleteItem(id, size) {
            for (let i = 0; i < cart.length; i++) {
                if (cart[i].id == id && cart[i].size === size) {
                    cart.splice(i, 1);
                    break;
                }
            }
            updateCart();
            getTotal(cart);
        }

        const buyButton = document.querySelector(".buy-btn");
        buyButton.addEventListener("click", function () {
            saveCartToCSV();
        });

    });

    function extractProducts(data) {
        const products = [];

        for (const key in data) {
            const productData = data[key];
            const sizes = getTrueSizes(productData.size);
            let imageName = "";
            if (productData.productImage) {
                imageName = productData.productImage;
            }

            const product = {
                id: key,
                name: productData.name,
                price: productData.price,
                sizes: sizes,
                imageName: imageName,
            };

            products.push(product);
        }

        return products;
    }

    function getTrueSizes(sizes) {
        return Object.keys(sizes).filter(key => sizes[key]);
    }

    async function saveCartToCSV() {
        if (cart.length === 0) {
            alert("Der Einkaufswagen ist noch leer!");
            return;
        }

        const csvHeader = "Product Name,Size,Quantity,Price\n";
        const csvRows = cart.map(item =>
            `${item.name.replace(",",";")},${item.size},${item.quantity},${item.price.replace(',', '.')}`
        ).join("\n");
        const csvData = csvHeader + csvRows;

        const nameInput = document.getElementById("csv-name");
        const name = nameInput.value;

        if (!name) {
            nameInput.style.border = "1px solid red";
            return;
        } else {
            nameInput.style.border = "";
        }

        try {
            const response = await fetch('/user/save_cart.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `csvData=${encodeURIComponent(csvData)}&filename=${encodeURIComponent(name)}.csv`,
            });

            if (response.ok) {
                console.log("CSV saved successfully!");

                const successMessage = document.createElement("div");
                successMessage.textContent = "Bestellung erfolgreich gespeichert!";
                successMessage.style.color = "green";


                const cartContainer = document.querySelector(".cart");
                cartContainer.prepend(successMessage);

                setTimeout(() => {
                    cartContainer.removeChild(successMessage);
                }, 5000);

            } else {
                console.error('Failed to save CSV:', response.status);
            }
        } catch (error) {
            console.error('Error saving CSV:', error);
        }
    }

</script>

{% set flex = grav.get('flex') %}
{% set directory = flex.directory('products') %}
{% set list = directory.collection() %}
<div class="module-content" data-module-id="shop">
<h1 class="">Shop</h1>
<div class="body">
    <div class="columns">
        <div class="column col-md-12 col-8">
            <div class="container shop-container">
                <h3 class="heading">Produkte</h3>
                <div class="product-list" data-list="{{ list|json_encode() }}">
                    <div class="result"></div>
                </div>
            </div>
        </div>
        <div class="column col-md-12 col-4">
            <div class="cart">
                <div class="cart-header">
                    <h3>Einkaufswagen</h3>
                    <p class="noOfItems">0 Produkte</p>
                </div>
                <hr noshade="true" size="1px"/>
                <div class="cart-items"></div>
                <hr noshade="true" size="1px"/>
                <div class="cart-footer cart-header">
                    <h4 class="cart-h4">Total</h4>
                    <p class="total">0€</p>
                </div>

                <div class="cart-input">
                    <label class="input">
                        <input class="input__field" id="csv-name" type="text" placeholder=" " />
                        <span class="input__label">Besteller</span>
                    </label>
                </div>

                <button class="buy-btn">Bestellung abgeben</button>
            </div>
        </div>
    </div>
</div>
</div>